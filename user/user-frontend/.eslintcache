[{"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\index.js":"1","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\login\\index.js":"2","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\hall\\index.js":"3","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\register\\index.js":"4","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\history\\index.js":"5","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\changePassword\\index.js":"6","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\game\\index.js":"7","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\gameDetail\\index.js":"8","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\userDetail\\index.js":"9","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\forgetPassword\\index.js":"10","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\url.js":"11","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\socket.js":"12","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\listUser\\index.js":"13","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\listGames\\index.js":"14","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\board\\index.js":"15","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\chat\\index.js":"16","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\boardHistory\\index.js":"17","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\square\\index.js":"18"},{"size":1502,"mtime":1609820378000,"results":"19","hashOfConfig":"20"},{"size":6983,"mtime":1610161893792,"results":"21","hashOfConfig":"20"},{"size":10551,"mtime":1609821514000,"results":"22","hashOfConfig":"20"},{"size":5173,"mtime":1610161582629,"results":"23","hashOfConfig":"20"},{"size":3059,"mtime":1609814762000,"results":"24","hashOfConfig":"20"},{"size":3972,"mtime":1609814764000,"results":"25","hashOfConfig":"20"},{"size":6626,"mtime":1609832756000,"results":"26","hashOfConfig":"20"},{"size":4980,"mtime":1609815172000,"results":"27","hashOfConfig":"20"},{"size":5038,"mtime":1609814758000,"results":"28","hashOfConfig":"20"},{"size":2925,"mtime":1609820304000,"results":"29","hashOfConfig":"20"},{"size":233,"mtime":1607140050000,"results":"30","hashOfConfig":"20"},{"size":2163,"mtime":1609821080000,"results":"31","hashOfConfig":"20"},{"size":3759,"mtime":1609820242000,"results":"32","hashOfConfig":"20"},{"size":702,"mtime":1609820334000,"results":"33","hashOfConfig":"20"},{"size":505,"mtime":1609820264000,"results":"34","hashOfConfig":"20"},{"size":1419,"mtime":1609820284000,"results":"35","hashOfConfig":"20"},{"size":985,"mtime":1608885130000,"results":"36","hashOfConfig":"20"},{"size":449,"mtime":1609833492000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11ct4i2",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\index.js",[],["81","82"],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\login\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\hall\\index.js",["83","84"],"import { Box, Button, Dialog, DialogTitle, Grid, Typography,DialogContent,DialogActions, TextField } from '@material-ui/core';\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport React , {useState,useEffect} from 'react';\r\nimport ListUser from '../listUser';\r\nimport {initializeSocket,getUsetsOnline} from '../socket';\r\nimport URL from '../url';\r\nimport {joinGame, matchRandom, cancelMatchRandom, getMatchRandomResult} from '../socket';\r\nimport ListGames from '../listGames';\r\n\r\nexport default function Hall(props){\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const [usersOnline,setUsersOnline] = useState([]);\r\n    const [games,setGames] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [isMatchOption,setIsMatchOption] = useState(false);\r\n    const [idGame,setIdGame] = useState(0);\r\n    const [message,setMessage] = useState('');\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    useEffect(()=>{\r\n        const verifyUser = async () => {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n\r\n        const getAllUsers = async () => {\r\n            const responds = await fetch(URL.getUrl()+\"users\",{\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            })\r\n            const data = await responds.json();\r\n            setUsers(data);\r\n        }\r\n\r\n        getUsetsOnline(users => {\r\n            let newUsersOnlineArray =[];\r\n            for(const user in users)\r\n            {\r\n                newUsersOnlineArray = [...newUsersOnlineArray,users[user]];\r\n            }\r\n            setUsersOnline(newUsersOnlineArray);\r\n        });\r\n\r\n        getMatchRandomResult(data => {\r\n            const idGameString = data.idGame.toString()\r\n            joinGame(idGameString,location.state.idUser,(data)=>{\r\n                if(data.success === true){\r\n                    history.replace({\r\n                        pathname: '/game/'+idGameString,\r\n                        state: {idUser: location.state.idUser}});\r\n                }\r\n            });  \r\n        })\r\n\r\n        verifyUser();\r\n        getAllUsers();\r\n    },[]);\r\n\r\n    useEffect(()=> {\r\n        const getAllGames = async () => {\r\n            const respond = await fetch(URL.getUrl() + \"game\", {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            })\r\n            const data = await respond.json();\r\n            setGames(data);\r\n        }\r\n        getAllGames();\r\n    },[]); // deploy nhooooooooooooooooooooooooooooooooo bo []\r\n\r\n    useEffect(() => {\r\n        initializeSocket(location.state?.idUser);\r\n    },[]);\r\n\r\n    const handleJoinNewGameClick = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n\r\n    const handleNewGameClick = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const response = await fetch(URL.getUrl()+\"game/add\",{\r\n            method: 'GET',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n        }});\r\n\r\n        const dataRespond = await response.json();\r\n\r\n        const idGame = dataRespond.id.toString();\r\n\r\n        joinGame(idGame,location.state.idUser,(data)=>{\r\n            if(data.success === true){\r\n                history.replace({\r\n                    pathname: '/game/'+idGame,\r\n                    state: {idUser: location.state.idUser}});\r\n            }\r\n        });   \r\n    }\r\n\r\n    const handleChangeIdGame = (e) => {\r\n        setIdGame(e.target.value);\r\n    }\r\n\r\n    const handleJoinGameSubmit = async (e) => {  \r\n        e.preventDefault();\r\n        const response = await fetch(URL.getUrl()+\"game/check\",{\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + localStorage.getItem(\"token\")\r\n            },\r\n            body: JSON.stringify({\r\n                idGame: idGame\r\n            })});\r\n            \r\n        const data = await response.json();\r\n        if(data === true)\r\n        {\r\n            joinGame(idGame,location.state.idUser,(data)=>{\r\n                if(data.success === true){\r\n                    history.replace({\r\n                        pathname: '/game/'+idGame,\r\n                        state: {idUser: location.state.idUser}});\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setMessage('ID Game is not correct');\r\n        }\r\n    }\r\n\r\n    const handleJoin = (id) => {\r\n        const idGame = id.toString();\r\n        \r\n        joinGame(idGame,location.state.idUser,(data)=>{\r\n            if(data.success === true){\r\n                history.replace({\r\n                    pathname: '/game/'+idGame,\r\n                    state: {idUser: location.state.idUser}});\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleClickMatchRandom = () => {\r\n        setIsMatchOption(true);\r\n        matchRandom(location.state.idUser);\r\n\r\n    }\r\n    const handleClickCancelMatchRandom = () => {\r\n        setIsMatchOption(false);\r\n        cancelMatchRandom(location.state.idUser);\r\n    }\r\n\r\n    const handleLogOut = () => {\r\n        localStorage.removeItem(\"token\");\r\n        history.replace(\"/\");\r\n    }\r\n\r\n    return (\r\n        <Box m={3}>\r\n            <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Grid container>\r\n                        <Grid item lg={6} md={6} sm={12}>\r\n                            <Box>\r\n                                <Link to={{\r\n                                    pathname: \"/user/\"+location.state?.idUser,\r\n                                    state: {\r\n                                        idUser: location.state?.idUser\r\n                                    }}} style={{textDecoration: 'none'}}>\r\n                                    <Button variant=\"contained\" color=\"primary\">My Info</Button>\r\n                                </Link>\r\n\r\n                                <Link to={{\r\n                                    pathname: \"/history\",\r\n                                    state: {\r\n                                        idUser: location.state?.idUser\r\n                                    }\r\n                                }} style={{textDecoration: 'none'}}>\r\n                                    <Button variant=\"outlined\"  color=\"primary\">History</Button>\r\n                                </Link>\r\n                                <Button color=\"primary\" onClick={handleLogOut}>Log out</Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item lg={6} md={6} sm={12}>\r\n                            <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flex-end\">\r\n                                {\r\n                                    isMatchOption === false ? \r\n                                    <Button  color=\"primary\" onClick={handleClickMatchRandom}>Match Random</Button>\r\n                                    :\r\n                                    <Button  color=\"secondary\" onClick={handleClickCancelMatchRandom}>Cancel Match Random</Button>\r\n                                }\r\n                                <Button onClick={handleJoinNewGameClick} variant=\"outlined\" color=\"primary\">Join Game</Button>\r\n                                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">                           \r\n                                    <DialogTitle id=\"form-dialog-title\">Join Game</DialogTitle>\r\n                                    <form onSubmit={handleJoinGameSubmit}>\r\n                                        <DialogContent>\r\n                                            <TextField\r\n                                                autoFocus\r\n                                                margin=\"dense\"\r\n                                                id=\"name\"\r\n                                                label=\"ID Game\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                onChange = {handleChangeIdGame}\r\n                                            />\r\n                                            <Typography>{message}</Typography>\r\n                                        </DialogContent>\r\n                                        <DialogActions>\r\n                                        <Button onClick={handleClose} color=\"primary\">\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button color=\"primary\" type=\"submit\">\r\n                                            Join\r\n                                        </Button>\r\n                                        </DialogActions>\r\n                                    </form>\r\n                                </Dialog>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={handleNewGameClick}>New Game</Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item lg={3} md={3} sm={4} xs={12}>\r\n                    <ListUser myId={location.state?.idUser} users={users} usersOnline={usersOnline}></ListUser>\r\n                </Grid>\r\n                <Grid item lg={9} md={9} sm={8} xs={12}>\r\n                    <ListGames games={games} handleJoin={handleJoin}></ListGames>\r\n                </Grid>\r\n            </Grid> \r\n        </Box>\r\n    );\r\n}\r\n","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\register\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\history\\index.js",["85"],"import { Box, Button, Grid, List, ListItem, ListItemText, Typography } from '@material-ui/core';\r\nimport React , {useState,useEffect} from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport URL from '../url';\r\n\r\nexport default function History(props){\r\n    const [games,setGames] = useState([]);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        async function verifyUser() {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n\r\n        async function getHistory(){\r\n            const respond = await fetch(URL.getUrl() + \"users/\" + location.state.idUser + \"/history\",{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await respond.json();\r\n            setGames(data);\r\n        }\r\n\r\n        verifyUser();\r\n        getHistory();\r\n    },[]);\r\n\r\n    return(\r\n        <Box m={3}>\r\n           <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Link to={{\r\n                        pathname: \"/hall\",\r\n                        state: { idUser: location.state?.idUser}}}>\r\n                            <Button variant=\"outlined\" color=\"primary\">Return To Hall</Button>\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Typography variant=\"h5\">Your History</Typography>\r\n                    <List>\r\n                        {games.map((value,key) =>(\r\n                            <div key={key}>\r\n                                <Box boxShadow={2} m={2}>\r\n                                    <ListItem>\r\n                                        <ListItemText>\r\n                                            ID Game: {value.idgame}\r\n                                        </ListItemText>\r\n                                        <Link to={{\r\n                                            pathname: \"/history/\" + value.idgame,\r\n                                            state: { idUser: location.state?.idUser}}}>\r\n                                                <Button>Detail</Button>\r\n                                        </Link>\r\n                                    </ListItem>\r\n                                </Box>    \r\n                            </div>\r\n                        ))}\r\n                    </List>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\changePassword\\index.js",["86"],"import { Box, Button, Grid, Typography, TextField } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\r\nimport URL from '../url';\r\n\r\nexport default function ChangePassword(props){\r\n    const [currentPassword,setCurrentPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [message,setMessage]=useState('');\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n\r\n    useEffect(()=>{\r\n        async function verifyUser() {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n\r\n        verifyUser();\r\n    },[]);\r\n\r\n    const handleChangeCurrentPassword = (e) => {\r\n        setCurrentPassword(e.target.value);\r\n    }\r\n\r\n    const handleChangeNewPassword = (e) => {\r\n        setNewPassword(e.target.value);\r\n    }\r\n\r\n    const handleSubmitChangePassword = async (e) => {\r\n        e.preventDefault();\r\n        if(currentPassword === '' || newPassword === '')\r\n        {\r\n            setMessage(\"Current or new password is empty\");\r\n            return;\r\n        }\r\n        const response = await fetch(URL.getUrl()+\"users/\"+id+'/changePassword',{\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + localStorage.getItem('token')},\r\n            body: JSON.stringify({\r\n                currentPassword: currentPassword,\r\n                newPassword: newPassword})});\r\n        \r\n        const data = await response.json();\r\n        setMessage(data);\r\n    }\r\n\r\n    return(\r\n        <Box m={3}>\r\n           <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Link to={{\r\n                        pathname: \"/user/\"+location.state?.idUser,\r\n                        state: { idUser: location.state?.idUser}}}>\r\n                            <Button variant=\"outlined\" color=\"primary\">Return To Info</Button>\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Box boxShadow={4}>\r\n                        <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" style={{height: '100vh'}}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h5\">\r\n                                    Change Password\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <form onSubmit={handleSubmitChangePassword}>\r\n                                    <div>\r\n                                        <TextField  type=\"password\" label=\"Currnet password\" onChange={handleChangeCurrentPassword}></TextField>\r\n                                    </div>\r\n                                    <div>\r\n                                        <TextField type=\"password\" label=\"New password\" onChange={handleChangeNewPassword}></TextField>\r\n                                    </div><br></br>\r\n                                    <Typography>{message}</Typography>\r\n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Change</Button>\r\n                                </form>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\game\\index.js",["87"],"import { Box, Button,  Grid, Snackbar, Typography } from '@material-ui/core';\r\nimport React, { useState,useEffect } from 'react';\r\nimport {Link, useParams, useLocation, useHistory} from \"react-router-dom\";\r\nimport {leaveGame,sendText,getChatHistory,sendPosition,getBoard, playGame, playGameResponse,getPlayers,giveIn,giveInResponse} from '../socket';\r\nimport Board from '../board';\r\nimport Chat from '../chat';\r\nimport BoardHistory from '../boardHistory';\r\nimport URL from '../url';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function Game(props){\r\n\r\n    const [text,setText] = useState('');\r\n    const [chatHistory,setChatHistory] = useState([]);\r\n    const [board,setBoard] = useState([]);\r\n    const [players,setPlayers] = useState([]);\r\n    const [boardHistory,setBoardHistory] = useState([]);\r\n    const [winner,setWinner] = useState({});\r\n    const [openMessage,setOpenMessage] = useState(false);\r\n    const [isPlaySuccess,setIsPlaySuccess] = useState(undefined);\r\n    const [message,setMessage] = useState('');\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { id } = useParams();\r\n\r\n    useEffect(()=>{\r\n        async function verifyUser() {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n        verifyUser();\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        getChatHistory(data => {\r\n            setChatHistory(data);\r\n        });\r\n\r\n        getBoard(data => {\r\n            if(Object.keys(data.winner).length !== 0)\r\n            {\r\n                setWinner(data.winner);\r\n            }\r\n            if(data.history !== undefined)\r\n            {\r\n                setBoardHistory(data.history);\r\n            }\r\n            if(data.board !== undefined) setBoard(data.board);\r\n        });\r\n\r\n        playGameResponse(data => {\r\n            if(data.success === true)\r\n            {\r\n                setIsPlaySuccess(true);\r\n            }\r\n            if(data.success === false)\r\n            {\r\n                setIsPlaySuccess(false);\r\n            }\r\n            setOpenMessage(true);\r\n        })\r\n\r\n        getPlayers(data=>{\r\n            setPlayers(data.players);\r\n        })\r\n\r\n        giveInResponse(data=>{\r\n            setMessage(data.message);\r\n            setWinner(data.winner);\r\n        })\r\n    },[]);\r\n\r\n    const handleLeaveGame = () => {\r\n        leaveGame(id,location.state.idUser);\r\n    }\r\n\r\n    const handleChangeText = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const handleSubmitChat = (e) => {\r\n        e.preventDefault();\r\n        sendText(id,location.state.idUser,text);\r\n    }\r\n\r\n    const handleClickSquare = (i) => {  \r\n        sendPosition(id,location.state.idUser, Math.floor(i/20), i%20)\r\n    }\r\n\r\n    const handlePlayGame = (id,idUser) => {\r\n        playGame(id,idUser)\r\n    }\r\n\r\n    const handleGiveIn = () => {\r\n        giveIn(id,location.state.idUser);\r\n    }\r\n\r\n\r\n    const handleCloseAlert = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setOpenMessage(false);\r\n    }\r\n\r\n    return(\r\n        <Box m={3}>\r\n           <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Link to={{\r\n                        pathname: \"/hall\",\r\n                        state: { idUser: location.state?.idUser}}}>\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleLeaveGame}>Return To Hall</Button>\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item lg={6} md={12} sm={12} xs ={12}>\r\n                    <Grid container>\r\n                        <Grid item lg={9} md={9} sm={9} xs ={9}>\r\n                            <Typography>Game ID: {id}</Typography>\r\n                            <Typography>Your ID: {location.state?.idUser}</Typography>\r\n                            <Typography>Players:</Typography>\r\n                            <ol>\r\n                                {\r\n                                    players.map((value,key) => (\r\n                                        <li key={key}>  &#9823; {value.id} - {value.name}</li>\r\n                                    ))\r\n                                }\r\n                            </ol>\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3} sm={3} xs ={3}>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={ () => handlePlayGame(id,location.state?.idUser)}>Play</Button>\r\n                            <Snackbar open={openMessage}>\r\n                            {\r\n                                isPlaySuccess ? \r\n                                <Alert onClose={handleCloseAlert} severity=\"success\">\r\n                                    Play game success\r\n                                </Alert>:\r\n                                isPlaySuccess === false ? \r\n                                <Alert onClose={handleCloseAlert} severity=\"error\">\r\n                                    Game is full\r\n                                </Alert> :\r\n                                <Alert severity=\"info\" onClose={handleCloseAlert}>Welcome to Game</Alert>\r\n                            }\r\n                            </Snackbar>\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleGiveIn}>Give in</Button>\r\n                            <Typography>{message}</Typography>\r\n                            {Object.keys(winner).length !== 0 ? <Typography variant=\"h6\">Winner: &#9818; {winner.id} - {winner.name}</Typography> : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Board board={board} handleClickSquare={handleClickSquare}></Board>\r\n                </Grid>\r\n                <Grid item lg={3} md={5} sm={5} xs ={5}>\r\n                    <BoardHistory history={boardHistory}></BoardHistory>\r\n                </Grid>\r\n                <Grid item lg={3} xs={7} sm={7} md={7}>\r\n                    <Chat chatHistory={chatHistory} handleChangeText={handleChangeText} handleSubmitChat={handleSubmitChat}></Chat>\r\n                </Grid>\r\n            </Grid> \r\n        </Box>\r\n    )} ","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\gameDetail\\index.js",["88"],"import { Box, Button, Grid, Typography } from '@material-ui/core';\r\nimport React, {useState, useEffect} from 'react';\r\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\r\nimport Board from '../board';\r\nimport BoardHistory from '../boardHistory';\r\nimport Chat from '../chat';\r\nimport URL from '../url';\r\n\r\nexport default function GameDetail(props){\r\n    const [game,setGame] = useState({});\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [boardHistory,setBoardHistory] = useState([]);\r\n    const [players,setPlayers] = useState([]);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n\r\n    useEffect(()=>{\r\n        async function verifyUser() {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n\r\n        async function getGame(){\r\n            const respond = await fetch(URL.getUrl() + \"game/\" + id,{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await respond.json();\r\n            setGame(data[0]);\r\n        }\r\n\r\n        async function getChat(){\r\n            const respond = await fetch(URL.getUrl()+ 'game/' + id + '/chat',{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await respond.json();\r\n            setChatHistory(data);\r\n        }\r\n\r\n        async function getBoardHistory(){\r\n            const respond = await fetch(URL.getUrl()+ 'game/' + id + '/history',{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await respond.json();\r\n            setBoardHistory(data);\r\n        }\r\n\r\n        async function getGamePlayers(){\r\n            const respond = await fetch(URL.getUrl()+ 'game/' + id + '/players',{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await respond.json();\r\n            setPlayers(data);\r\n        }\r\n\r\n        verifyUser();\r\n        getGame();\r\n        getChat();\r\n        getBoardHistory();\r\n        getGamePlayers();\r\n    },[])\r\n\r\n    const handleClickSquare = () => {\r\n\r\n    }\r\n\r\n    return(\r\n        <Box m={3}>\r\n           <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Link to={{\r\n                        pathname: \"/history\",\r\n                        state: { idUser: location.state?.idUser}}}>\r\n                            <Button variant=\"outlined\" color=\"primary\">Return To History</Button>\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    {\r\n                        game !== undefined ? \r\n                        <Typography variant = \"h5\">Winner ID: &#9818;{game.winner}</Typography> : null\r\n                    }\r\n                    <Typography>Players: </Typography>\r\n                    <ol>\r\n                        {\r\n                        players.map((value,key) => (\r\n                            <li key={key}>  &#9823; {value.iduser} - {value.Account.name}</li>\r\n                        ))\r\n                        }\r\n                    </ol>\r\n                </Grid>\r\n                <Grid item lg={6} md={12} sm={12} xs ={12}>\r\n                {\r\n                    game.boards !== undefined  ? \r\n                    <Board board={game.boards} handleClickSquare={handleClickSquare}></Board>  : null\r\n                }\r\n                    \r\n                </Grid>\r\n                <Grid item lg={3} md={5} sm={5} xs ={5}>\r\n                    <BoardHistory history={boardHistory}></BoardHistory> \r\n                </Grid>\r\n                <Grid item lg={3} xs={7} sm={7} md={7}>\r\n                    <Chat isDisableChat={true} chatHistory={chatHistory}></Chat>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\userDetail\\index.js",["89"],"import { Box, Button, Grid, Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react';\r\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom';\r\nimport URL from '../url';\r\n\r\nexport default function UserDetail(props){\r\n    const [user,setUser] = useState({\r\n        email: \"\",\r\n        id: 0,\r\n        isadmin: false,\r\n        isblocked: false,\r\n        name: \"\",\r\n        phone: \"\",\r\n        point: 0,\r\n        totalplays: 0,\r\n        totalwins: 0\r\n    })\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n    useEffect(()=>{\r\n        async function verifyUser() {\r\n            const response = await fetch(URL.getUrl()+\"users/verify\",{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            if(response.status === 401)\r\n            {\r\n                history.replace('/');\r\n            }\r\n        }\r\n\r\n        async function getUser(){\r\n            const response = await fetch(URL.getUrl()+\"users/\" + id,{\r\n                method: 'GET',\r\n                headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }});\r\n\r\n            const data = await response.json();\r\n            setUser(data);\r\n        }\r\n\r\n        verifyUser();\r\n        getUser();\r\n    },[]);\r\n\r\n\r\n    return(\r\n        <Box m={3}>\r\n           <Grid container spacing={2}>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Link to={{\r\n                        pathname: \"/hall\",\r\n                        state: { idUser: location.state?.idUser}}}>\r\n                            <Button variant=\"outlined\" color=\"primary\">Return To Hall</Button>\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                    <Box boxShadow={4}>\r\n                        <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" style={{height: '100vh'}}>\r\n                            <Grid item>\r\n                                <Typography variant=\"h5\">\r\n                                    User's Information\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    ID: {user.id}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    Name: {user.name}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    Email: {user.email}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    Phone: {user.phone}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    &#9956; Point: {user.point}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    &#9876; Total plays: {user.totalplays}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography>\r\n                                    &#9818; Total wins: {user.totalwins} ({(user.totalwins/user.totalplays*100).toFixed(3)}%)\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            {\r\n                                id === location.state?.idUser.toString() ? \r\n                                <Link to={{\r\n                                pathname: \"/user/\"+location.state?.idUser +\"/changePassword\",\r\n                                state: {\r\n                                    idUser: location.state?.idUser\r\n                                }}} style={{textDecoration: 'none'}}>\r\n                                    <Button variant=\"contained\" color=\"primary\">Change Password</Button>\r\n                                </Link> : null\r\n                            }\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}","C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\forgetPassword\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\url.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\socket.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\listUser\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\listGames\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\board\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\chat\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\boardHistory\\index.js",[],"C:\\Users\\PV\\Desktop\\PTUDWeb_NC\\user\\user-frontend\\src\\components\\square\\index.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":75,"column":7,"nodeType":"96","endLine":75,"endColumn":9,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":96,"column":7,"nodeType":"96","endLine":96,"endColumn":9,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"95","line":42,"column":7,"nodeType":"96","endLine":42,"endColumn":9,"suggestions":"100"},{"ruleId":"94","severity":1,"message":"101","line":31,"column":7,"nodeType":"96","endLine":31,"endColumn":9,"suggestions":"102"},{"ruleId":"94","severity":1,"message":"101","line":46,"column":7,"nodeType":"96","endLine":46,"endColumn":9,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"104","line":91,"column":7,"nodeType":"96","endLine":91,"endColumn":9,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"104","line":52,"column":7,"nodeType":"96","endLine":52,"endColumn":9,"suggestions":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'location.state.idUser'. Either include them or remove the dependency array.","ArrayExpression",["109"],"React Hook useEffect has a missing dependency: 'location.state?.idUser'. Either include it or remove the dependency array.",["110"],["111"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["112"],["113"],"React Hook useEffect has missing dependencies: 'history' and 'id'. Either include them or remove the dependency array.",["114"],["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"116","fix":"120"},{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"124","fix":"125"},{"desc":"124","fix":"126"},"Update the dependencies array to be: [history, location.state.idUser]",{"range":"127","text":"128"},"Update the dependencies array to be: [location.state?.idUser]",{"range":"129","text":"130"},{"range":"131","text":"128"},"Update the dependencies array to be: [history]",{"range":"132","text":"133"},{"range":"134","text":"133"},"Update the dependencies array to be: [history, id]",{"range":"135","text":"136"},{"range":"137","text":"136"},[2773,2775],"[history, location.state.idUser]",[3472,3474],"[location.state?.idUser]",[1467,1469],[1095,1097],"[history]",[1785,1787],[3193,3195],"[history, id]",[1622,1624]]