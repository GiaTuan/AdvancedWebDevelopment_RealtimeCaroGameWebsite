#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const app = require('../app');
const debug = require('debug')('user-backend:server');
const http = require('http');
const socketIO = require('socket.io');
const gameService = require('../components/game/gameService');
const chatService = require('../components/chat/chatService');
const accountService = require('../components/account/accountService');
const checkWin = require('../services/checkWin');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


const server = http.createServer(app);
const io = socketIO(server,{
  cors: {
    origin: '*'
  }
});


const users = {};
const rooms ={};
const matchRandomList = [];

io.on("connection", (socket) => {
  socket.on("connect-to-server", userId=>{
    users[socket.id] = userId;
    socket.emit("online",users);
    socket.broadcast.emit("online",users);
  });

  socket.on("join", async (data) => {
    if(!Object.keys(rooms).includes(data.idGame))
    {
      const blankBoard = new Array(20).fill(null);
      for(let i = 0 ; i < 20 ; i++)
      {
        blankBoard[i] = new Array(20).fill(null);
      }

      await gameService.addBoardToGame(data.idGame,new Array(400).fill(null));

      rooms[data.idGame]= {
        chat: [],
        board: [...blankBoard],
        currentTurn: 0,
        players: [],
        winner: {},
        history: []
      }
    }
    socket.join(data.idGame);
    let board = [];
    for(let i = 0 ; i < rooms[data.idGame].board.length; i++)
    {
      board = board.concat(rooms[data.idGame].board[i]);
    }
    io.to(socket.id).emit("join-respond", {success: true});
    io.to(data.idGame).emit("board-respond",{board: board, history: rooms[data.idGame].history, winner: rooms[data.idGame].winner});
    io.to(data.idGame).emit("chat",rooms[data.idGame].chat);
    io.to(data.idGame).emit("players", {players : rooms[data.idGame].players});
  });

  socket.on("leave", async (data) => {
    socket.leave(data.idGame);

    const room = io.sockets.adapter.rooms.get(data.idGame);
    if(room === undefined)
    {
      delete rooms[data.idGame];
      await gameService.setGameIsdone(data.idGame);
    }
  });

  socket.on("chat",  async (data)=>{
    const user = await accountService.getUserFromId(data.idUser);

    const obj = {
      content: data.text,
      user: user
    }

    rooms[data.idGame].chat = [...rooms[data.idGame].chat,obj];
    
    await chatService.addChat(data.idGame,data.idUser,data.text);

    io.to(data.idGame).emit("chat",rooms[data.idGame].chat);
  });

  socket.on("play-game", async (data) => {
    if(rooms[data.idGame].players.length < 2)
    {
      if(!rooms[data.idGame].players.some(obj => obj.id === data.idUser))
      {
        await gameService.addGameUser(data.idGame,data.idUser);
        await accountService.updateTotalPlaysByIdUser(data.idUser);
        const user = await accountService.getUserFromId(data.idUser);
        rooms[data.idGame].players = [...rooms[data.idGame].players,user];
      }
      io.to(socket.id).emit("play-game", {success: true});
      io.to(data.idGame).emit("players",{players : rooms[data.idGame].players});
    }
    else
    {
      io.to(socket.id).emit("play-game", {success: false});
      io.to(data.idGame).emit("players",{players : rooms[data.idGame].players});
    }
  });

  socket.on("send-position", async (data)=>{

    if(!rooms[data.idGame].players.some(obj => obj.id === data.idUser)) return;

    if(Object.keys(rooms[data.idGame].winner).length !== 0) return;

    if(rooms[data.idGame].currentTurn === data.idUser) return;

    if(rooms[data.idGame].board[data.row][data.col] !== null) return;

    rooms[data.idGame].currentTurn = data.idUser;

    //add history
    rooms[data.idGame].history = [...rooms[data.idGame].history,data]

    //add X O to square
    rooms[data.idGame].board[data.row][data.col] = rooms[data.idGame].players[0].id === data.idUser ? 'X' : 'O';

    //check win
    const check = checkWin(rooms[data.idGame].board,data.row,data.col);

    if(check)
    {
      rooms[data.idGame].winner = await accountService.getUserFromId(data.idUser);
      const winnerId = data.idUser;
      const loserId = rooms[data.idGame].players[0].id === data.idUser ? rooms[data.idGame].players[1].id : rooms[data.idGame].players[0].id;
      await gameService.addWinner(data.idGame,data.idUser);
      await accountService.updateWinner(winnerId,loserId);
    }

    //convert to 1d array to send back to ui and save db
    let board = [];
    for(let i = 0 ; i < rooms[data.idGame].board.length; i++)
    {
      board = board.concat(rooms[data.idGame].board[i]);
    }

    //save to db
    await gameService.addHistory(data.idUser,data.idGame,data.row,data.col);
    await gameService.addBoardToGame(data.idGame,board);

    //send data to ui
    io.to(data.idGame).emit("board-respond",{board: board, history: rooms[data.idGame].history, winner: rooms[data.idGame].winner});
  });

  socket.on("match-random", async (data) => {
    matchRandomList.push(socket.id);
    while(matchRandomList.length > 1)
    {
      if(matchRandomList[0] !== undefined && matchRandomList[1] !== undefined)
      {
        const game = await gameService.getNewGame();
        io.to(matchRandomList[0]).to(matchRandomList[1]).emit("match-random", {idGame: game.id});
        matchRandomList.pop();
        matchRandomList.pop();
      }
    }
  })

  socket.on("cancel-match-random", async (data) => {
    const index = matchRandomList.indexOf(socket.id);
    matchRandomList.splice(index,1);
  })

  socket.on("give-in", async(data)=>{
    if(rooms[data.idGame].players.length === 0)
    {
      return;
    }

    if(!rooms[data.idGame].players.some(obj => obj.id === data.idUser)) return;

    if(Object.keys(rooms[data.idGame].winner).length !== 0)
    {
      return;
    }
    rooms[data.idGame].winner = rooms[data.idGame].players[0].id === data.idUser ? rooms[data.idGame].players[1] : rooms[data.idGame].players[0];
    const winnerId = rooms[data.idGame].winner.id;
    const loserId = rooms[data.idGame].players[0].id === data.idUser ? rooms[data.idGame].players[0].id : rooms[data.idGame].players[1].id;
    await gameService.addWinner(data.idGame,rooms[data.idGame].winner.id);
    await accountService.updateWinner(winnerId,loserId);
    io.to(data.idGame).emit("give-in",{message: 'User ID ' + data.idUser + ' gave in', winner: rooms[data.idGame].winner});
  })

  socket.on("disconnect", () => {
    delete users[socket.id];
    socket.broadcast.emit("online",users);
  });
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * 
 */
