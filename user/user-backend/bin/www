#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const app = require('../app');
const debug = require('debug')('user-backend:server');
const http = require('http');
const socketIO = require('socket.io');
const { use } = require('passport');
const gameService = require('../components/game/gameService');
const chatService = require('../components/chat/chatService');
const { chat } = require('../connection');
const checkWin = require('../services/checkWin');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


const server = http.createServer(app);
const io = socketIO(server,{
  cors: {
    origin: '*'
  }
});


const addDataToGameUser  = async (idUser,idGame) => {
  await gameService.addDataToGameUser(idUser,idGame);
}

const addChat = async(idGame,idUser,text) => {
  await chatService.addChat(idGame,idUser,text);
}

const getChat = async(idGame) => {
  const result = await chatService.getChat(idGame);
  return result;
}

const deleteChat = async(idGame) => {
  await chatService.deleteChat(idGame);
}


const users = {};
const rooms ={};

io.on("connection", (socket) => {
  socket.on("connect-to-server", userId=>{
    users[socket.id] = userId;
    socket.emit("online",users);
    socket.broadcast.emit("online",users);
  })

  // socket.on("start", data => {

  //   socket.join(data.idGame);

  //   const blankBoard = new Array(20).fill(null);
  //   for(let i = 0 ; i < 20 ; i++)
  //   {
  //     blankBoard[i] = new Array(20).fill(null);
  //   }

  //   rooms[data.idGame]= {
  //     chat: [],
  //     board: [...blankBoard],
  //     currentTurn: 0,
  //     players: [],
  //     winner: 0,
  //     history: []
  //   }

  //   let board = [];
  //     for(let i = 0 ; i < rooms[data.idGame].board.length; i++)
  //     {
  //       board = board.concat(rooms[data.idGame].board[i]);
  //     }
      
  //   io.to(data.idGame).emit("board-respond",{board: board});
  // })


  socket.on("join", data => {
    const room = io.sockets.adapter.rooms.get(data.idGame);
    let size = 0;
    if(room !== undefined)
    {
      size = room.size;
    }
    if(size === 2)
    {
      socket.emit("join-respond", {success: false});
    }
    else 
    {
      if(!Object.keys(rooms).includes(data.idGame))
      {
        const blankBoard = new Array(20).fill(null);
        for(let i = 0 ; i < 20 ; i++)
        {
          blankBoard[i] = new Array(20).fill(null);
        }
        rooms[data.idGame]= {
          chat: [],
          board: [...blankBoard],
          currentTurn: 0,
          players: [],
          winner: 0,
          history: []
        }
      }
      // else
      // {
      //   rooms[data.idGame].currentTurn = 'O';
      // }
      socket.join(data.idGame);
      //addDataToGameUser(data.idUser,data.idGame);
      //const turnOfPlayer = rooms[data.idGame].currentTurn;
      //console.log(turnOfPlayer);
      //socket.emit("join-respond", {success: true,turn: turnOfPlayer });
      socket.emit("join-respond", {success: true});

      let board = [];
      for(let i = 0 ; i < rooms[data.idGame].board.length; i++)
      {
        board = board.concat(rooms[data.idGame].board[i]);
      }
      io.to(data.idGame).emit("board-respond",{board: board});
    }

  })

  socket.on("leave",  (data) => {
    socket.leave(data.idGame);

    const room = io.sockets.adapter.rooms.get(data.idGame);
    if(room === undefined)
    {
      //await deleteChat(data.idGame);
      delete rooms[data.idGame];
    }
  })

  socket.on("chat",  (data)=>{
    //await addChat(data.idGame,data.idUser,data.text);
    //const chatHistory = await getChat(data.idGame);

    const id = data.idUser;
    const text = data.text;
    const obj ={};
    obj[id] = text;

    rooms[data.idGame].chat = [...rooms[data.idGame].chat,obj];

    console.log(rooms[data.idGame].chat);

    io.to(data.idGame).emit("chat",rooms[data.idGame].chat);
  })

  // socket.on("get-board",data=>{
  //   io.to(data.idGame).emit("get-board-respond",{board: rooms[data.idGame].board});
  // });

  socket.on("play-game",data=>{
    console.log(data);
    if(rooms[data.idGame].winner !== 0) return;

    if(rooms[data.idGame].players.length < 2)
    {
      if(!rooms[data.idGame].players.includes(data.idUser))
      {
        rooms[data.idGame].players = [...rooms[data.idGame].players,data.idUser];
      }
    }

    if(rooms[data.idGame].currentTurn === data.idUser)
    {
      return;
    }

    rooms[data.idGame].currentTurn = data.idUser;


    if(rooms[data.idGame].board[data.row][data.col] !== null)
    {
      return;
    }


    //add history
    rooms[data.idGame].history = [...rooms[data.idGame].history,data]

    //add X O to square
    rooms[data.idGame].board[data.row][data.col] = rooms[data.idGame].players[0] === data.idUser ? 'X' : 'O';

    //check win
    const check = checkWin(rooms[data.idGame].board,data.row,data.col);

    let winner = 0;
    if(check)
    {
      rooms[data.idGame].winner = data.idUser;
      winner = data.idUser;
    }

    //convert to 1d array to send back to ui
    let board = [];
    for(let i = 0 ; i < rooms[data.idGame].board.length; i++)
    {
      board = board.concat(rooms[data.idGame].board[i]);
    }

    console.log(board);


    //send data to ui
    io.to(data.idGame).emit("board-respond",{board: board, history: rooms[data.idGame].history, winner: winner});
  })

  socket.on("demo",data=>{
    console.log(data);
  })

  socket.on("disconnect", () => {
    delete users[socket.id];
    socket.broadcast.emit("online",users);
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * 
 */
