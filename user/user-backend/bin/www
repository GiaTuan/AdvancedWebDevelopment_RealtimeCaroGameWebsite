#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const app = require('../app');
const debug = require('debug')('user-backend:server');
const http = require('http');
const socketIO = require('socket.io');
const { use } = require('passport');
const gameService = require('../components/game/gameService');
const chatService = require('../components/chat/chatService');
const { chat } = require('../connection');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


const server = http.createServer(app);
const io = socketIO(server,{
  cors: {
    origin: '*'
  }
});


const addDataToGameUser  = async (idUser,idGame) => {
  await gameService.addDataToGameUser(idUser,idGame);
}

const addChat = async(idGame,idUser,text) => {
  await chatService.addChat(idGame,idUser,text);
}

const getChat = async(idGame) => {
  const result = await chatService.getChat(idGame);
  console.log(JSON.stringify(result));
  return result;
}

const deleteChat = async(idGame) => {
  await chatService.deleteChat(idGame);
}


const users = {};

io.on("connection", (socket) => {
  socket.on("connect-to-server", userId=>{
    users[socket.id] = userId;
    socket.emit("online",users);
    socket.broadcast.emit("online",users);
  })

  socket.on("join", data => {
    const room = io.sockets.adapter.rooms.get(data.idGame);
    let size = 0;
    if(room !== undefined)
    {
      size = room.size;
    }
    if(size === 2)
    {
      socket.emit("join-respond", {success: false});
    }
    else 
    {
      socket.join(data.idGame);
      addDataToGameUser(data.idUser,data.idGame);
      socket.emit("join-respond", {success: true});
    }

  })

  socket.on("leave", async (data) => {
    socket.leave(data.idGame);

    const room = io.sockets.adapter.rooms.get(data.idGame);
    if(room === undefined)
    {
      await deleteChat(data.idGame);
    }
  })

  socket.on("chat", async (data)=>{
    await addChat(data.idGame,data.idUser,data.text);
    const chatHistory = await getChat(data.idGame);
    io.to(data.idGame).emit("chat-respond",chatHistory);
  })

  socket.on("disconnect", () => {
    delete users[socket.id];
    socket.broadcast.emit("online",users);
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
